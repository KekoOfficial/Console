/* Archivo: index.js Descripci칩n: Bot "Subbot" para WhatsApp usando @whiskeysockets/baileys. Incluye:

Conexi칩n por QR (imprime QR en consola)

Env칤o de mensajes privados 1 vez por n칰mero (persistente)

Logs en db.json para evitar reenv칤os tras reinicios

Mensaje autom치tico al unirse el bot al grupo

Mensaje autom치tico cuando entra un nuevo miembro al grupo (persistente)

Comando .help en grupos


INSTRUCCIONES R츼PIDAS (tambi칠n incluidas aqu칤):

1. Tener Node.js 18+ instalado.


2. Crear carpeta del proyecto y poner este archivo como index.js.


3. Crear package.json con "type":"module" o usar Node ESM. (abajo hay un ejemplo de package.json)


4. Instalar dependencias: npm install @whiskeysockets/baileys qrcode-terminal pino


5. Ejecutar: node index.js



EJEMPLO package.json m칤nimo: { "name": "whatsapp-subbot", "version": "1.0.0", "type": "module", "main": "index.js", "scripts": { "start": "node index.js" }, "dependencies": { "@whiskeysockets/baileys": "^6.0.0", "qrcode-terminal": "^0.12.0", "pino": "^8.0.0" } }

NOTAS DE SEGURIDAD Y 칄TICA:

Usa este bot s칩lo con consentimiento y en cumplimiento de las pol칤ticas de WhatsApp.

No lo uses para spam o para enviar mensajes masivos sin permiso.


*/

import makeWASocket, { DisconnectReason, fetchLatestBaileysVersion, generateForwardMessageContent, makeCacheStore, jidNormalizedUser, proto } from '@whiskeysockets/baileys' import pino from 'pino' import qrcode from 'qrcode-terminal' import fs from 'fs' import path from 'path'

const logger = pino({ level: 'info' })

const DB_FILE = path.join('./', 'db.json')

function loadDB(){ try{ if(!fs.existsSync(DB_FILE)) fs.writeFileSync(DB_FILE, JSON.stringify({ privateSent: [], groupAnnounced: [], groupMemberWelcomed: {} }, null, 2)) return JSON.parse(fs.readFileSync(DB_FILE,'utf8')) }catch(e){ logger.error('Error al leer DB:', e) return { privateSent: [], groupAnnounced: [], groupMemberWelcomed: {} } } }

function saveDB(db){ try{ fs.writeFileSync(DB_FILE, JSON.stringify(db, null, 2)) }catch(e){ logger.error('Error al guardar DB:', e) } }

let db = loadDB()

async function startBot(){ const { version, isLatest } = await fetchLatestBaileysVersion() logger.info('Baileys version:', version, 'isLatest?', isLatest)

const sock = makeWASocket({ logger, printQRInTerminal: false })

// Mostrar QR en consola cuando se emita sock.ev.on('connection.update', (update) => { const { connection, lastDisconnect, qr } = update if(qr){ qrcode.generate(qr, { small: true }) console.log('\nEscanea el QR con tu WhatsApp para vincular (usa tu tel칠fono)') }

if(connection === 'close'){
  const reason = (lastDisconnect?.error)?.output?.statusCode || lastDisconnect?.error
  logger.info('Conexi칩n cerrada:', reason)
  // reconectar autom치ticamente
  if(lastDisconnect?.error?.output?.statusCode !== DisconnectReason.loggedOut){
    startBot()
  } else {
    logger.info('Se desconect칩 (loggedOut). Borra credenciales y vuelve a escanear si lo deseas.')
  }
}

if(connection === 'open'){
  logger.info('Sesi칩n conectada')
}

})

// Guardar credenciales de auth automaticamente (baileys lo hace internamente si usas state) // Mensajes entrantes y comandos sock.ev.on('messages.upsert', async (m) => { try{ if(m.type !== 'notify') return for(const msg of m.messages){ if(!msg.message) continue if(msg.key && msg.key.remoteJid === 'status@broadcast') continue const from = msg.key.remoteJid const isGroup = from.endsWith('@g.us') const messageContent = msg.message.conversation || (msg.message.extendedTextMessage && msg.message.extendedTextMessage.text) || ''

// Responder .help en grupos
    if(isGroup && messageContent.trim().toLowerCase() === '.help'){
      await sock.sendMessage(from, { text: 'Soy un Subbot. Comandos disponibles:\n.help - Mostrar ayuda' })
    }

    // Aqu칤 podr칤as a침adir manejo de m치s comandos si lo deseas
  }
}catch(e){
  logger.error('Error en messages.upsert:', e)
}

})

// Eventos de participantes del grupo: join/added/leave sock.ev.on('group-participants.update', async (update) => { try{ const gid = update.id const participants = update.participants // array de jids const action = update.action // 'add' | 'remove' | 'promote' | 'demote'

// Si el bot fue a침adido al grupo
  if(action === 'add'){
    // Si el bot est치 entre los a침adidos -> anuncio autom치tico en el grupo
    const botJid = sock.user.id
    if(participants.includes(botJid)){
      // anunciar en el grupo si no se hizo antes
      if(!db.groupAnnounced.includes(gid)){
        const text = 'Hola 游녦, hay un Subbot en este grupo. Pueden usar mis comandos con .help'
        await sock.sendMessage(gid, { text })
        db.groupAnnounced.push(gid)
        saveDB(db)
      } else {
        logger.info('Ya se hab칤a anunciado este grupo:', gid)
      }
      return
    }

    // Si otros usuarios fueron a침adidos, damos mensaje de bienvenida a esos usuarios (pero solo una vez por usuario en ese grupo)
    for(const p of participants){
      // Ignorar si el a침adido es el bot
      if(p === sock.user.id) continue
      const welcomed = db.groupMemberWelcomed[gid] || []
      if(!welcomed.includes(p)){
        const text = `Bienvenid@! 游녦 Hay un Subbot en este grupo. Usa .help para ver comandos.`
        await sock.sendMessage(gid, { text, mentions: [p] })
        // registrar
        db.groupMemberWelcomed[gid] = [...welcomed, p]
        saveDB(db)
      } else {
        logger.info('Usuario ya bienvenido en este grupo:', p, gid)
      }
    }
  }

  // Tambi칠n podr칤amos manejar action === 'remove' si queremos borrar logs cuando alguien se va

}catch(e){
  logger.error('Error en group-participants.update:', e)
}

})

// FUNCIONES P칔BLICAS 칔TILES: enviar mensaje privado 1 vez async function sendPrivateOnce(jid, text){ try{ // normalizar jid (por si el usuario pas칩 s칩lo n칰meros) jid = jidNormalizedUser(jid) // aseg칰rate que termine con @s.whatsapp.net if(!jid.includes('@')) jid = jid + '@s.whatsapp.net'

if(db.privateSent.includes(jid)){
    logger.info('Ya se envi칩 antes a', jid)
    return { ok: false, reason: 'already_sent' }
  }

  await sock.sendMessage(jid, { text })
  db.privateSent.push(jid)
  saveDB(db)
  return { ok: true }
}catch(e){
  logger.error('Error al enviar privado:', e)
  return { ok: false, error: e }
}

}

// Exponer la funci칩n en objeto global simple por si quieres usarla desde REPL global.subbot = { sendPrivateOnce }

logger.info('Subbot listo. Usa global.subbot.sendPrivateOnce("595XXXXXXXX@s.whatsapp.net","Mensaje") desde REPL o a침ade l칩gica adicional en el c칩digo para enviar mensajes masivos (con consentimiento).')

}

startBot().catch(err => logger.error('Fallo al iniciar bot:', err))

